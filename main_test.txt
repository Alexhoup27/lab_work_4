package main

import (
	"fmt"
	"math"
	"os"
)

var A_l, B_l, C_l, D_l, E_l, A_g, B_g, C_g, D_g, E_g float64
var x, y float64

func eval_delta(A, B, C, D, E float64) float64 {
	return (math.Pow(C, 2) / (4 * A)) + (math.Pow(D, 2) / (4 * B)) - E
}

func is_intersect(y0_g, y0_l, A_g, A_l, B_g, B_l, delta float64) bool {
	if math.Abs((B_g+B_l)*(B_g*math.Pow(y0_g, 2)+B_l*math.Pow(y0_l, 2)-delta)-
		math.Pow(B_g*y0_g+B_l*y0_l, 2))/(-((B_g + B_l) * (A_g + A_l))) != 0 {
		return true
	}
	return false
}

// Проверка через дельу
func это_гипербола(A, B, C, D, E, a, b float64) bool {
	if a <= 0 && b <= 0 {
		return false
	}
	delta := eval_delta(A, B, C, D, E)
	if delta != 0 && A*B < 0 {
		return true
	}
	return false
}

func это_линии(A, B, C, D, E, a, b float64) bool {
	if a <= 0 && b <= 0 {
		return false
	}
	delta := eval_delta(A, B, C, D, E)
	if delta == 0 && A*B < 0 {
		return true
	}
	return false
}

func on_lines(A, B, C, D, E, x, y float64) bool {
	return A*math.Pow(x, 2)+B*math.Pow(y, 2)+C*x+D*y+E == 0
}

func on_hyperbola(A, B, C, D, E, x, y float64) bool {
	return A*math.Pow(x, 2)+B*math.Pow(y, 2)+C*x+D*y+E == 0
}

func under_hyperbola(a, b, x_0, y_0, x, y float64) bool {
	desc := math.Sqrt(math.Pow(2*a*y_0, 2) - 4*a*
		(a*math.Pow(y_0, 2)-b*math.Pow(x, 2)+2*x*x_0*b-b*math.Pow(x_0, 2)-a*b))
	if desc < 0 {
		return false
	}
	y_1 := (2*a*y_0 + desc) / (2 * a)
	y_2 := (2*a*y_0 - desc) / (2 * a)
	if y < y_1 && y < y_2 {
		return true
	}
	return false
}

func over_hyperbola(a, b, x_0, y_0, x, y float64) bool {
	desc := math.Sqrt(math.Pow(2*a*y_0, 2) - 4*a*
		(a*math.Pow(y_0, 2)-b*math.Pow(x, 2)+2*x*x_0*b-b*math.Pow(x_0, 2)-a*b))
	if desc < 0 {
		return false
	}
	y_1 := (2*a*y_0 + desc) / (2 * a)
	y_2 := (2*a*y_0 - desc) / (2 * a)
	if y > y_1 && y > y_2 {
		return true
	}
	return false
}

func over_under_lines(a, b, x_0, y_0, x, y float64) bool {
	desc := math.Sqrt(math.Pow(2*a*y_0, 2) + 4*a*
		(-a*math.Pow(y_0, 2)+b*math.Pow(x, 2)-2*x*x_0*b+b*math.Pow(x_0, 2)))
	if desc < 0 {
		return false
	}
	y_1 := (2*a*y_0 + desc) / (2 * a)
	y_2 := (2*a*y_0 - desc) / (2 * a)
	if y > math.Min(y_1, y_2) && y < math.Max(y_1, y_2) {
		return true
	}
	return false
}

func over_lines(a, b, x_0, y_0, x, y float64) bool {
	desc := math.Sqrt(math.Pow(2*a*y_0, 2) + 4*a*
		(-a*math.Pow(y_0, 2)+b*math.Pow(x, 2)-2*x*x_0*b+b*math.Pow(x_0, 2)))
	if desc < 0 {
		return false
	}
	y_1 := (2*a*y_0 + desc) / (2 * a)
	y_2 := (2*a*y_0 - desc) / (2 * a)
	if y > y_1 && y > y_2 {
		return true
	}
	return false
}
func correct_graphics(y0_l, y0_g, b_g, a_g, b_l, a_l float64) bool {
	if y0_l != y0_g-math.Pow(math.Abs(b_g), 0.5) {
		return false //проверка на правильное положение точки симметрии линей
	}
	if math.Abs(math.Abs(a_g-b_g)*2-math.Abs(a_l-b_l)*1.9) <= 2 {
		return false // проверка на пересечение графиков
	}
	return true
}

func new_correct_graphics(x0_l, y0_l, x0_g, y0_g, a_h, b_h, c_h, d_h, e_h, a_l, b_l float64) bool {
	if on_hyperbola(a_h, b_h, c_h, d_h, e_h, x0_l, y0_l) == false ||
		x0_l != x0_g || y0_l >= y0_g { // проверка на положение графиков относительно друг друга
		return false
	}
	delta := eval_delta(a_h, b_h, c_h, d_h, e_h)
	if is_intersect(y0_g, y0_l, a_h, a_l, b_h, b_l, delta) == false {
		return false
	}
	return true
}

func main() {
	fmt.Println("Enter A, B, C, D, E for intersecting lines:")
	fmt.Scan(&A_l, &B_l, &C_l, &D_l, &E_l)
	b_l := A_l
	a_l := B_l
	x0_l := -C_l / (2 * b_l)
	y0_l := D_l / (2 * a_l)
	if это_линии(A_l, B_l, C_l, D_l, E_l, a_l, b_l) == false {
		fmt.Println("Not lines!!!")
		os.Exit(0)
	}
	fmt.Println("Enter A, B, C, D, E for hyperbola:")
	fmt.Scan(&A_g, &B_g, &C_g, &D_g, &E_g)
	b_g := A_g
	a_g := B_g
	x0_g := C_g / (2 * b_g)
	y0_g := -D_g / (2 * a_g)
	if это_гипербола(A_g, B_g, C_g, D_g, E_g, a_g, b_g) == false {
		fmt.Println("Not hyperbola!!!")
		os.Exit(0)
	}

	if x0_g != x0_l || y0_l >= y0_g {
		fmt.Println("Wrong graphics !!!")
		os.Exit(0)
	}
	if new_correct_graphics(x0_l, y0_l, x0_g, y0_g, A_g, B_g, C_g, D_g, E_g, A_l, B_l) == false {
		fmt.Println("Wrong graphics !!!")
		os.Exit(0)
	}
	fmt.Println("Enter cords:")
	fmt.Scan(&x, &y)
	flag_l := on_lines(A_l, B_l, C_l, D_l, E_l, x, y)
	flag_h := on_hyperbola(A_g, B_g, C_g, D_g, E_g, x, y)
	if flag_l && flag_h {
		fmt.Println("Paint booth grafics")
	} else if flag_l {
		fmt.Println("Paint lines")
	} else if flag_h {
		fmt.Println("Paint hyperbola")
	} else if y < y0_l && x > x0_l {
		if over_under_lines(a_l, b_l, x0_l, y0_l, x, y) && under_hyperbola(a_g, b_g, x0_g, y0_g, x, y) {
			fmt.Println("Paint in white")
		} else {
			fmt.Println("Paint in blue")
		}
	} else if y > y0_l && x < x0_l {
		if over_under_lines(a_l, b_l, x0_l, y0_l, x, y) && over_hyperbola(a_g, b_g, x0_g, y0_g, x, y) {
			fmt.Println("Paint in white")
		} else {
			fmt.Println("Paint in blue")
		}
	} else if y > y0_l {
		if over_lines(a_l, b_l, x0_l, y0_l, x, y) &&
			(under_hyperbola(a_g, b_g, x0_g, y0_g, x, y) == false &&
				over_hyperbola(a_g, b_g, x0_g, y0_g, x, y) == false) {
			fmt.Println("Paint in white")
		} else {
			fmt.Println("Paint in blue")
		}
	} else {
		fmt.Println("Paint in blue")
	}
	return
}
package main

import (
	"fmt"
	"math"
)

var a, b float64
var m int64

func go_f(x float64) float64 {
	// fmt.Println(math.Pow(float64(1)+(float64(2)/math.Pi)*math.Abs(math.Atan(x)), 0.5))
	return math.Pow(float64(1)+(float64(2)/math.Pi)*math.Abs(math.Atan(x)), 0.5)
}
func my_f(x, eps float64) float64 {
	x = (math.Abs(arctg(x, eps)) * 2) / math.Pi
	result := float64(1)
	k := 1
	step := result
	for math.Abs(step) >= eps {
		// step *= -2 * float64(k) * x * (float64(3-2*k) / float64(4*math.Pow(float64(k), 2)*
		// 	float64(1-2*k)))
		step *= -1 * float64(x) *
			(float64((2*k-1)*2*k*(1-2*(k-1))) /
				float64(float64(1-2*k)*math.Pow(float64(k), 2)*4))
		result += step
		k++
	}
	return result
}
func arctg(x, eps float64) float64 {
	new_x := x
	if math.Abs(x) > 1 {
		new_x = 1.0 / x
	}
	result := new_x
	k := 2
	step := new_x
	for math.Abs(step) >= eps {
		step *= -1 * math.Pow(new_x, 2) * float64(2*k-3) / float64(2*k-1)
		k++
		result += step
	}
	if math.Abs(x) > 1 {
		return math.Pi/2 - result
	}
	return result
}
func main() {
	var eps = 0.0000001
	fmt.Println("Введите зачения a, b и m\nНе забудьте про ограничения на переменные из отчёта")
	fmt.Scan(&a, &b, &m)
	h := (b - a) / float64(m)
	for i := 0; int64(i) <= m; i++ {
		x := float64(a + float64(i)*h)
		// xx := arctg(x, eps) * float64(2) / math.Pi
		fmt.Println(x, " ", my_f(x, eps), " ", go_f(x))
		// fmt.Println(x, arctg(x, eps), math.Atan(x))
	}
}
package main

import (
	"fmt"
	"math"
)

var n int
var a, b float64

func my_f(x, eps float64) float64 {
	x = (math.Abs(arctg(x, eps)) * 2) / math.Pi
	result := float64(1)
	k := 1
	step := result
	for math.Abs(step) >= eps {
		// step *= -2 * float64(k) * x * (float64(3-2*k) / float64(4*math.Pow(float64(k), 2)*
		// 	float64(1-2*k)))
		step *= -1 * float64(x) *
			(float64((2*k-1)*2*k*(1-2*(k-1))) /
				float64(float64(1-2*k)*math.Pow(float64(k), 2)*4))
		result += step
		k++
	}
	return result
}
func arctg(x, eps float64) float64 {
	new_x := x
	if math.Abs(x) > 1 {
		new_x = 1.0 / x
	}
	result := new_x
	k := 2
	step := new_x
	for math.Abs(step) >= eps {
		step *= -1 * math.Pow(new_x, 2) * float64(2*k-3) / float64(2*k-1)
		k++
		result += step
	}
	if math.Abs(x) > 1 {
		return math.Pi/2 - result
	}
	return result
}

func matrix_print(to_print [][]float64, n int) {
	for i := 0; i < n; i++ {
		fmt.Println(to_print[i])
	}
}

func matrix_column_swap(matrix [][]float64, first, second, n int) [][]float64 {
	result := make([][]float64, n, n)
	for i := 0; i < n; i++ {
		result[i] = make([]float64, n)
	}
	for i := 0; i < n; i++ {
		for g := 0; g < n; g++ {
			if g == first {
				result[i][second] = matrix[i][g]
			} else if g == second {
				result[i][first] = matrix[i][g]
			} else {
				result[i][g] = matrix[i][g]
			}
		}
	}
	return result
}

func find_biggest(to_anal [][]float64, n int) [2]int {
	// var result []int
	var to_return [2]int
	to_return[0] = 0
	to_return[1] = 1
	var _min float64 = 10000.0
	var _max float64 = -1
	result := make([]float64, n)
	for i := 0; i < n; i++ {
		result[i] = float64(0)
	}
	for i := 0; i < n; i++ {
		for g := 0; g < n; g++ {
			result[g] += float64(to_anal[i][g])
		}
	}
	for i := 0; i < n; i++ {
		if result[i] > _max {
			to_return[0] = i
			_max = result[i]
		}
		if result[i] < _min {
			to_return[1] = i
			_min = result[i]
		}
	}
	return to_return
}

func odd_array(n int, digits []float64, eps float64) [][]float64 {
	result := make([][]float64, n, n)
	for i := 0; i < n; i++ {
		result[i] = make([]float64, n)
	}
	k := 0
	m := 1
	result[n/2][n/2] = my_f(digits[0], eps)
	now_x := n / 2
	now_y := n / 2
	count := 0
	for m < n-1 {
		if k == 0 {
			for i := 1; i <= m; i++ {
				count++
				result[now_y+i][now_x] = my_f(digits[count], eps)
			}
			now_y += m
			for i := 1; i <= m; i++ {
				count++
				result[now_y][now_x+i] = my_f(digits[count], eps)
			}
			now_x += m
			k = 1
		} else if k == 1 {
			for i := 1; i <= m; i++ {
				count++
				result[now_y-i][now_x] = my_f(digits[count], eps)
			}
			now_y -= m
			for i := 1; i <= m; i++ {
				count++
				result[now_y][now_x-i] = my_f(digits[count], eps)
			}
			now_x -= m
			k = 0
		}
		m++
	}
	for i := 1; i <= m; i++ {
		count++
		result[now_y-i][now_x] = my_f(digits[count], eps)
	}
	now_y -= m
	for i := 1; i <= m; i++ {
		count++
		result[now_y][now_x-i] = my_f(digits[count], eps)
	}
	now_x -= m
	for i := 1; i <= m; i++ {
		count++
		result[now_y+i][now_x] = my_f(digits[count], eps)
	}
	now_y += m
	return result
}
func honest_array(n int, digits []float64, eps float64) [][]float64 {
	result := make([][]float64, n, n)
	for i := 0; i < n; i++ {
		result[i] = make([]float64, n)
	}
	k := 0
	m := 1
	result[n/2-1][n/2-1] = my_f(digits[0], eps)
	now_x := n/2 - 1
	now_y := n/2 - 1
	count := 0
	for m < n-1 {
		if k == 0 {
			for i := 1; i <= m; i++ {
				count++
				result[now_y+i][now_x] = my_f(digits[count], eps)
			}
			now_y += m
			for i := 1; i <= m; i++ {
				count++
				result[now_y][now_x+i] = my_f(digits[count], eps)
			}
			now_x += m
			k = 1
		} else if k == 1 {
			for i := 1; i <= m; i++ {
				count++
				result[now_y-i][now_x] = my_f(digits[count], eps)
			}
			now_y -= m
			for i := 1; i <= m; i++ {
				count++
				result[now_y][now_x-i] = my_f(digits[count], eps)
			}
			now_x -= m
			k = 0
		}
		m++
	}
	for i := 1; i <= m; i++ {
		count++
		result[now_y+i][now_x] = my_f(digits[count], eps)
	}
	now_y += m
	for i := 1; i <= m; i++ {
		count++
		result[now_y][now_x+i] = my_f(digits[count], eps)
	}
	now_x += m
	for i := 1; i <= m; i++ {
		count++
		result[now_y-i][now_x] = my_f(digits[count], eps)
	}
	now_y -= m
	return result
}
func main() {
	var result [][]float64
	eps := float64(0.00001)
	fmt.Println("Enter size of square matrix")
	fmt.Scan(&n)
	fmt.Println("Enter left and right border")
	fmt.Scan(&a, &b)
	digits := make([]float64, n*n)
	now_digit := a
	for i := 0; i < n*n; i++ {
		digits[i] = now_digit
		now_digit += (b - a) / float64(n*n)
	}
	if n%2 == 1 {
		result = odd_array(n, digits, eps)
	} else {
		result = honest_array(n, digits, eps)
	}
	matrix_print(result, n)
	indexes := find_biggest(result, n)
	fmt.Println("biggest - ", indexes[0], "; least - ", indexes[1])
	matrix_print(matrix_column_swap(result, indexes[0], indexes[1], n), n)
}
